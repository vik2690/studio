// This file is generated by Gemini.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting new or modified controls based on identified risk gaps.
 *
 * - suggestControls - A function that suggests controls based on risk gaps.
 * - SuggestControlsInput - The input type for the suggestControls function.
 * - SuggestControlsOutput - The return type for the suggestControls function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestControlsInputSchema = z.object({
  riskGapAnalysisReport: z
    .string()
    .describe(
      'A detailed report on compliance shortfalls and weaknesses in existing policies.'
    ),
  currentPolicies: z.string().describe('The current policies in place.'),
});
export type SuggestControlsInput = z.infer<typeof SuggestControlsInputSchema>;

const SuggestControlsOutputSchema = z.object({
  suggestedControls: z
    .string()
    .describe(
      'A list of suggested new or modified controls to address the identified risk gaps.'
    ),
  justification: z
    .string()
    .describe(
      'The reasoning behind the suggested controls and how they address the identified risks.'
    ),
});
export type SuggestControlsOutput = z.infer<typeof SuggestControlsOutputSchema>;

export async function suggestControls(input: SuggestControlsInput): Promise<SuggestControlsOutput> {
  return suggestControlsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestControlsPrompt',
  input: {schema: SuggestControlsInputSchema},
  output: {schema: SuggestControlsOutputSchema},
  prompt: `You are a compliance expert. Based on the risk gap analysis report and the current policies, suggest new or modified controls to address the identified risk gaps.

Risk Gap Analysis Report:
{{riskGapAnalysisReport}}

Current Policies:
{{currentPolicies}}

Suggest controls that are practical and effective in addressing the identified risks. Explain the reasoning behind each suggested control.

Format your response as follows:

Suggested Controls:
[List of suggested controls]

Justification:
[Explanation of why the controls are suggested]`,
});

const suggestControlsFlow = ai.defineFlow(
  {
    name: 'suggestControlsFlow',
    inputSchema: SuggestControlsInputSchema,
    outputSchema: SuggestControlsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
